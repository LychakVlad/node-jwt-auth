{"ast":null,"code":"import axios from 'axios';\nexport const API_URL = 'http://localhost:3001/api';\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL\n});\n$api.interceptors.request.use(config => {\n  config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  return config;\n});\n$api.interceptors.response.use(config => {\n  return config;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status == 401 && error.config && !error.config._isRetry) {\n    originalRequest._isRetry = true;\n    try {\n      const response = await axios.get(`${API_URL}/refresh`, {\n        withCredentials: true\n      });\n      localStorage.setItem('token', response.data.accessToken);\n      return $api.request(originalRequest);\n    } catch (error) {\n      console.log('NOT authenticated ');\n    }\n  }\n});\nexport default $api;","map":{"version":3,"names":["axios","API_URL","$api","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","get","setItem","data","accessToken","console","log"],"sources":["/Users/Vlad/Documents/projects/jwt-auth-practice/client/src/http/index.ts"],"sourcesContent":["import axios from 'axios';\nimport { error } from 'console';\nimport { AuthResponse } from '../models/response/AuthResponse';\n\nexport const API_URL = 'http://localhost:3001/api';\n\nconst $api = axios.create({\n  withCredentials: true,\n  baseURL: API_URL,\n});\n\n$api.interceptors.request.use((config) => {\n  config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\n  return config;\n});\n\n$api.interceptors.response.use(\n  (config) => {\n    return config;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    if (\n      error.response.status == 401 &&\n      error.config &&\n      !error.config._isRetry\n    ) {\n      originalRequest._isRetry = true;\n      try {\n        const response = await axios.get<AuthResponse>(`${API_URL}/refresh`, {\n          withCredentials: true,\n        });\n        localStorage.setItem('token', response.data.accessToken);\n        return $api.request(originalRequest);\n      } catch (error) {\n        console.log('NOT authenticated ');\n      }\n    }\n  }\n);\n\nexport default $api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,OAAO,GAAG,2BAA2B;AAElD,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAAC;EACxBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAEJ;AACX,CAAC,CAAC;AAEFC,IAAI,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACxCA,MAAM,CAACC,OAAO,CAACC,aAAa,GAAI,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;EACxE,OAAOJ,MAAM;AACf,CAAC,CAAC;AAEFP,IAAI,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC3BC,MAAM,IAAK;EACV,OAAOA,MAAM;AACf,CAAC,EACD,MAAOM,KAAK,IAAK;EACf,MAAMC,eAAe,GAAGD,KAAK,CAACN,MAAM;EACpC,IACEM,KAAK,CAACD,QAAQ,CAACG,MAAM,IAAI,GAAG,IAC5BF,KAAK,CAACN,MAAM,IACZ,CAACM,KAAK,CAACN,MAAM,CAACS,QAAQ,EACtB;IACAF,eAAe,CAACE,QAAQ,GAAG,IAAI;IAC/B,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMd,KAAK,CAACmB,GAAG,CAAgB,GAAElB,OAAQ,UAAS,EAAE;QACnEG,eAAe,EAAE;MACnB,CAAC,CAAC;MACFQ,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAAC;MACxD,OAAOpB,IAAI,CAACK,OAAO,CAACS,eAAe,CAAC;IACtC,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC;EACF;AACF,CACF,CAAC;AAED,eAAetB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}